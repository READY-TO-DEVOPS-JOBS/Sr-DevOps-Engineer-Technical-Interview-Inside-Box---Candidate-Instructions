Explain the process of building a Docker image and
deploying it to a Kubernetes cluster

Building a Docker Image
Write a Dockerfile: Create a Dockerfile in your project directory. This file contains instructions on how to build your Docker image.

dockerfile
Copy code
# Use an official Python runtime as a parent image
FROM python:3.9-slim

# Set the working directory in the container
WORKDIR /app

# Copy the current directory contents into the container at /app
COPY . /app

# Install any needed packages specified in requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

# Make port 80 available to the world outside this container
EXPOSE 80

# Define environment variable
ENV NAME World

# Run app.py when the container launches
CMD ["python", "app.py"]
Create an app: Place your application code (app.py in this example) and any necessary files (like requirements.txt) in the same directory as your Dockerfile.

Build the Docker image: Open a terminal or command prompt, navigate to your project directory containing the Dockerfile, and run the following command to build the Docker image. Replace <your-dockerhub-id> and <image-name> with your DockerHub ID and desired image name, respectively.

bash
Copy code
docker build -t <your-dockerhub-id>/<image-name> .
This command builds an image tagged with <your-dockerhub-id>/<image-name>.

Verify the image: After building, verify that the image is created successfully by running:

bash
Copy code
docker images
You should see your newly built image listed.

Push the image to DockerHub (optional): If you want to deploy your Docker image to a Kubernetes cluster from DockerHub, push the image to your DockerHub repository:

bash
Copy code
docker push <your-dockerhub-id>/<image-name>
This step requires authentication with DockerHub (docker login).

Deploying to Kubernetes
Now that you have a Docker image, here's how you deploy it to a Kubernetes cluster:

Create a Kubernetes Deployment YAML file (deployment.yaml):

yaml
Copy code
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: myapp
  template:
    metadata:
      labels:
        app: myapp
    spec:
      containers:
      - name: myapp
        image: <your-dockerhub-id>/<image-name>:latest
        ports:
        - containerPort: 80
Replace <your-dockerhub-id>/<image-name> with the image name you used in the Docker build step.

Apply the Deployment:

Use kubectl to apply the deployment configuration to your Kubernetes cluster:

bash
Copy code
kubectl apply -f deployment.yaml
This creates a deployment named app-deployment with 3 replicas, using your Docker image.

Expose the Deployment as a Service:

To make your application accessible within the cluster, create a Kubernetes Service YAML file (service.yaml):

yaml
Copy code
apiVersion: v1
kind: Service
metadata:
  name: myapp-service
spec:
  type: NodePort  # Exposes the service on each Node's IP at a static port (NodePort)
  selector:
    app: myapp
  ports:
  - protocol: TCP
    port: 80  # Port exposed on the service
    targetPort: 80  # Port on the container where the service should forward traffic
    nodePort: 30080  # Optional: Port accessible externally on each node
Apply the service configuration:

bash
Copy code
kubectl apply -f service.yaml
Access your application:

To access your application within the cluster, use the service name myapp-service and port 80.
To access your application externally (if using NodePort type), use any node's IP address and the nodePort (e.g., http://node-ip:30080).
Summary
Build Docker Image: Write a Dockerfile, build the Docker image using docker build, and optionally push it to DockerHub.
Deploy to Kubernetes: Create a Deployment YAML file defining your application, apply it with kubectl apply -f deployment.yaml.
Expose as Service: Create a Service YAML file, apply it to expose your application within the Kubernetes cluster or externally using NodePort.
